#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&caps_word { continue-list = <MINUS UNDERSCORE BSPC DEL LEFT RIGHT DOT COMMA SEMI SLASH>; };
&sk { release-after-ms = <2000>; lazy; };
// &sl { release-after-ms = <1000>; };


#define xxxx &none
#define ____ &trans
#define ks(l) &ksk l l 
#define LCT ks(LCTRL)
#define LGU ks(LGUI)
#define LOP ks(LALT)
#define LSH ks(LSHFT)
#define RCT ks(RCTRL)
#define RGU ks(RGUI)
#define ROP ks(RALT)
#define RSH ks(RSHFT)
#define LEADR &sk LG(LS(LA(LCTRL)))
#define DELWRD &kp LA(BSPC)
#define REP &key_repeat
#define VOL_DN &kp C_VOL_DN  
#define VOL_UP &kp C_VOL_UP

#define SLN &sl 1
#define NAV &moto 1 1
#define FUN &tog 2
#define RST &moto 2 0

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 7000  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 7000  // 10
#include <dt-bindings/zmk/pointing.h>
&mmv {
  acceleration-exponent = <1>;      // 1
  time-to-max-speed-ms = <400>;    // 40
};
&msc {
  acceleration-exponent = <1>;      // 0
  time-to-max-speed-ms = <400>;   // 500
};

/ { 
    macros {
        dot_s:  dot_space  { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <5>; tap-ms = <15>;
            bindings = <&macro_tap &kp DOT &kp SPACE &sk LSHFT>; };
    };

    behaviors {
        ksk: kp_sk        { compatible = "zmk,behavior-hold-tap";  #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <200>; bindings = <&kp>, <&sk>; }; 
        moto: mo_tog      { compatible = "zmk,behavior-hold-tap";  #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <200>; bindings = <&mo>, <&tog>; }; 
        blt: bluetoot     { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&bt BT_NXT>, <&bt BT_CLR>; mods = <MOD_RALT>; };
        cps: caps_wrd     { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&caps_word>, <&kp CAPS>; mods = <MOD_RSFT>; };
    };
  
    keymap {
        compatible = "zmk,keymap";
        abc {
            display-name = "ABC";
            bindings = <
            //  1       2       3       4       5       6       7           8       9           10          11          12 
                &kp Q   &kp W   &kp E   &kp R   &kp T   &kp Z   SLN         &kp U   &kp I       &kp O       &kp P       &kp DEL 
                &kp TAB &kp A   &kp S   &kp D   &kp F   &kp G   &cps        &kp H   &kp J       &kp K       &kp L       &kp BSPC 
                LSH     &kp Y   &kp X   &kp C   &kp V   &kp B   &dot_s      &kp N   &kp M       &kp UP      &kp ENTER   RSH 
                REP     LEADR   LCT     LGUI    LALT    NAV     &kp SPACE   RST     &kp LEFT    &kp DOWN    &kp RIGHT   FUN 
            >; 
        };

        num {
            display-name = "NUM";
            bindings = <
            //  1       2           3           4           5           6           7           8       9       10      11      12 
                &kp ESC &kp GRAVE   &kp COMMA   &kp DOT     &kp SLASH   VOL_DN      VOL_UP      &kp N7  &kp N8  &kp N9  &kp N0  ____ 
                ____    &kp EQUAL   &kp MINUS   &kp SEMI    &kp SQT     &kp HOME    &kp END     &kp N4  &kp N5  &kp N6  &kp INS ____ 
                ____    ____        &kp LBKT    &kp RBKT    &kp BSLH    &kp PG_DN   &kp PG_UP   &kp N1  &kp N2  &kp N3  ____    ____ 
                ____    ____        ____        ____        ____        ____        ____        ____    ____    ____    ____    ____ 
            >; 
        };

        fun {
            display-name = "FUN";
            bindings = <
            //  1       2       3       4       5       6       7           8       9           10          11          12 
                &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7      &kp F8  &kp F9      &kp F10     &kp F11     &kp F12 
                ____    LSH     LCT     LGU     LOP     ____    ____        ROP     RGU         RCT         RSH         ____ 
                ____    ____  &mkp RCLK &mkp MCLK &mkp LCLK ____ ____   &kp K_APP &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN  ____ 
                ____    ____    ____    ____     ____   ____    ____        ____  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT ____ 
            >; 
        }; 
    }; 
};
